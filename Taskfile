#!/bin/bash

set -e

TARGETS=$(basename -s .cs -a $(ls ./test))
TESTDIR="test"

CSBIN="csbin"
DBGDIR="debug"
 DBIN="dbin"
 RBIN="rbin"

function clean {    # Clean things
    rm -f $CSBIN/* $DBIN/* $RBIN/* $DBGDIR/*
}

function buildcs {    # Build CSharp

  mkdir -p $CSBIN

  for T in $TARGETS; do
    echo "return main(); " | cat "$TESTDIR/$T.cs" - | ./dotnet-csc - -out:"$CSBIN/$T.dll"
  done
}

function builddriver {   # Build LSharp precompiler driver
  pushd ./src > /dev/null
  ./Taskfile build
  cp lcs ../
  popd > /dev/null
}

function buildd {    # Build C in debug mode
  mkdir -p $DBIN

  for T in $TARGETS; do
    ./lcsc -g -o$DBIN/$T "$TESTDIR/$T.cs"
  done
}

function buildr {    # Build C in release mode
  mkdir -p $RBIN

  for T in $TARGETS; do
    ./lcsc -o$RBIN/$T "$TESTDIR/$T.cs"
  done
}

function buildall {  # Build all version
  clean

  builddriver
  buildcs
  buildd
  buildr
}
function test {    # Runs something
  buildall

  for T in $TARGETS; do
    R1=$(dotnet "$CSBIN/$T.dll")
    R2=$($DBIN/$T)
    R3=$($RBIN/$T)
    if [ "$R1" = "$R2" ] && [ "$R2" = "$R3" ];
    then
      echo "OK: $T"
    else
      echo "ERROR: $T"
    fi
  done
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
