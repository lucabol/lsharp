#!/bin/bash

CSTARGETS=$(basename -s .cs -a $(ls ./cstest) | paste -sd " " -)
CSTESTDIR="test"

TARGETS=$(basename -s .cs -a $(ls ./test) | paste -sd " " -)

TESTDIR="test"
MULTITESTDIR="testmulti"
MULTITARGETS=$(ls $MULTITESTDIR/*.cs)

CSBIN="csbin"
 RBIN="bin"
COMP="lcs"

# set -x

function clean {    # Clean things
    rm -f $CSBIN/*  $RBIN/* $COMP
}

function buildcs {    # Build CSharp

  mkdir -p $CSBIN

  for T in $CSTARGETS; do
    echo "void printf(string s, params object[] objs){}return main(); " |
    cat "$CSTESTDIR/$T.cs" - |
    ./dotnet-csc src/Ns.cs - -nowarn:0219,8321 -out:"$CSBIN/$T.dll"
  done
}

function build {   # Build LSharp precompiler driver
  pushd ./src > /dev/null
  ./Taskfile build
  cp $COMP ../
  popd > /dev/null
}

function buildtests {    # Build tests
  mkdir -p $RBIN

  for T in $TARGETS; do
    ./$COMP -o$RBIN/$T "$TESTDIR/$T.cs"
  done

  ./$COMP -o"$RBIN/Multi" $MULTITARGETS
}


function cstest {    # Runs tests and cstests
  build
  buildtests

  for T in $CSTARGETS; do
    R1=$(dotnet "$CSBIN/$T.dll")
    R2=$($RBIN/$T > /dev/null)

    if [ "$R1" = "$R2" ] ;
    then
      echo "OK: $T"
    else
      echo "ERROR: $T"
    fi
  done
}

function test {    # Runs tests
  build
  buildtests

  for T in $TARGETS Multi; do
    $RBIN/$T > /dev/null

    if [ $? -eq "0" ];
    then
      echo "OK: $T"
    else
      echo "ERROR: $T"
    fi
  done
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
